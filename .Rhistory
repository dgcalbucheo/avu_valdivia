p.personan = 1')
df<-DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
z.geocodigo,
z.zonaloc_ref_id,
v.vivienda_ref_id,
v.ind_hacin_rec,
v.ind_material,
h.hogar_ref_id,
p.personan,
p.escolaridad
FROM
zonas AS z,
viviendas AS v,
hogares AS h,
personas AS p
WHERE
z.geocodigo LIKE \'141011%\'
AND
z.zonaloc_ref_id = v.zonaloc_ref_id
AND
v.vivienda_ref_id = h.vivienda_ref_id
AND
h.hogar_ref_id = p.hogar_ref_id
AND
p.personan = 1')
df<-DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
z.geocodigo,
z.zonaloc_ref_id,
v.vivienda_ref_id,
h.hogar_ref_id,
v.ind_hacin_rec,
v.ind_material,
p.personan,
p.escolaridad
FROM
zonas AS z,
viviendas AS v,
hogares AS h,
personas AS p
WHERE
z.geocodigo LIKE \'141011%\'
AND
z.zonaloc_ref_id = v.zonaloc_ref_id
AND
v.vivienda_ref_id = h.vivienda_ref_id
AND
h.hogar_ref_id = p.hogar_ref_id
AND
p.personan = 1')
View(df)
View(manzanas)
pkgs = c("ggplot2","sf","dplyr","cartography","censo2017","leaflet","rgdal","raster","tmap")
lapply(pkgs, require, character.only = TRUE)
df<-DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
z.geocodigo,
z.zonaloc_ref_id,
v.vivienda_ref_id,
h.hogar_ref_id,
v.ind_hacin_rec,
v.ind_material,
p.personan,
p.escolaridad
FROM
zonas AS z,
viviendas AS v,
hogares AS h,
personas AS p
WHERE
z.geocodigo LIKE \'141011%\'
AND
z.zonaloc_ref_id = v.zonaloc_ref_id
AND
v.vivienda_ref_id = h.vivienda_ref_id
AND
h.hogar_ref_id = p.hogar_ref_id
AND
p.personan = 1')
View(df)
DBI::dbGetQuery(
censo_conectar(),
'SELECT
vivienda_ref_id,
hogar_ref_id
FROM
variables_codificacion')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
variable = hogar_ref_id')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
variable = 'hogar_ref_id'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
variable = "hogar_ref_id"')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = hogares')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = personas')
DBI::dbGetQuery(
censo_conectar(),
'SELECT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion.tabla
WHERE
tabla = personas')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
v.tabla,
v.variable,
v.valor,
v.descripcion
FROM
variables_codificacion as v
WHERE
tabla = personas')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
v.tabla,
v.variable,
v.valor,
v.descripcion
FROM
variables_codificacion as v
WHERE
v.tabla = personas')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = 'personas'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = 'personas' ')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = personas')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = \'personas\'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = \'personas\'
AND
variable = \'hogar_ref_id\'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = \'hogares\'
AND
variable = \'hogar_ref_id\'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = \'hogares\'')
DBI::dbGetQuery(
censo_conectar(),
'SELECT DISTINCT
tabla,
variable,
valor,
descripcion
FROM
variables_codificacion
WHERE
tabla = \'viviendas\'')
manzanas<-read.csv("manzanas.csv", header=T, sep=";")
options(scipen = 999) #Desactivamos la notación científica
head(manzanas)
valdivia_mzn<-filter(manzanas, COMUNA == 14101)
valdivia_mzn<-dplyr::select(valdivia_mzn, COMUNA, ID_MANZENT, DC, ID_ZONA_LOC, PERSONAS, INMIGRANTES, PUEBLO)
head(valdivia_mzn)
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = st_read(shp)
View(manzanas)
View(sfdata)
pkgs = c("ggplot2","sf","dplyr","cartography","leaflet","rgdal","raster","tmap")
lapply(pkgs, require, character.only = TRUE)
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = st_read(shp)
head(sfdata)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
plot(mapvald)
View(mapvald)
View(mapvald)
library(tibble)
mapvald<-mapvald%>%
add_column(porcentaje_migr = ("PERSONAS_M"/"TOTAL_PERS"))
mapvald<-mapvald%>%
add_column(porcentaje_migr = (PERSONAS_M/TOTAL_PERS))
mapvald<-mapvald%>%
add_column(porcentaje_migr = (PERSONAS_E/TOTAL_PERS))
mapvald<-mapvald%>%
add_column(porcentaje_migr = PERSONAS_E/TOTAL_PERS)
mapvald<-mapvald%>%
add_column(porcentaje_migr = NA)
mapvald<-mapvald%>%
mutate(porcentaje_migr = PERSONAS_E/TOTAL_PERS)
mapvald<-mapvald%>%
na_if(PERSONAS_E, Indeterminado)
mapvald<-mapvald%>%
na_if(PERSONAS_E, "Indeterminado")
mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald<-mapvald%>%
mutate(porcentaje_migr = PERSONAS_E/TOTAL_PERS)
mapvald<-mapvald%>%
mutate(porcentaje_migr = PERSONAS_E*100)
class(mapvald%PERSONAS_E)
class(mapvald$PERSONAS_E)
mapvald$porcentaje_migr <-
as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS
View(mapvald)
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
class(mapvald$VIV_PARED_)
str_csr(mapvald) = 4326
str_crs(mapvald) = 4326
st_crs(mapvald) = 4326
st_transform(mapvald) = 4326
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = st_read(shp)
st_crs(mapvald) = 4326
utm_data = st_transform(mapvald, 32719)
head(utm_data)
st_crs(sfdata) = 4326
utm_data = st_transform(sfdata, 32719)
head(utm_data)
View(utm_data)
View(utm_data[[56]][[1]])
View(sfdata)
library(rgeos)
test<-sf::st_transform(mapvald, crs=4326)
View(test)
library(leafsync)
crsuggest::suggest_crs(mapvald, type = "projected")
install.packages("crsuggest")
crsuggest::suggest_crs(mapvald, type = "projected")
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
sf::st_transform(4326)%>%
sf::st_buffer(50)
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
sf::st_transform(4326)%>%
sf::st_buffer(10)
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
sf::st_transform(5683)%>%
sf::st_buffer(10)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
pkgs = c("ggplot2","sf","dplyr","cartography","leaflet","rgdal","raster","tmap", "tibble")
lapply(pkgs, require, character.only = TRUE)
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = read_sf(shp)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
plot(mapvald)
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
sf::st_transform(5683)%>%
sf::st_buffer(10)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(50)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(100)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
plot(mapvald)
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(100)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(200)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(10)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
pkgs = c("ggplot2","sf","dplyr","cartography","leaflet","rgdal","raster","tmap", "tibble")
lapply(pkgs, require, character.only = TRUE)
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = read_sf(shp)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
plot(mapvald)
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
mapvald$porcentaje_ind <-
(as.numeric(mapvald$PUEBLOS_IN)/mapvald$TOTAL_PERS) * 100
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(10)
#crsuggest::suggest_crs(mapvald, type = "projected")
test<-mapvald%>%
#sf::st_transform(5683)%>%
sf::st_buffer(100)
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(test))
library(terra)
install.packages("Kendall")
library(Kendall)
imagen<-list.files(pattern='*.tif', full.names=TRUE)
ndvi<-brick(stack(imagen))
imagen<-list.files(pattern='*.tif', full.names=TRUE)
ndvis<-brick(stack(imagen))
imagen
imagen<-list.files(pattern='*.tif', full.names=TRUE)
ndvis<-brick(stack(imagen))
plot(ndvis)
pkgs = c("ggplot2","sf","dplyr","cartography","leaflet","rgdal","raster","tmap", "tibble", "terra", "Kendall")
lapply(pkgs, require, character.only = TRUE)
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = read_sf(shp)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
mapvald<-mapvald%>%
mutate(PERSONAS_E = na_if(PERSONAS_E, "Indeterminado"))
mapvald$porcentaje_migr <-
(as.numeric(mapvald$PERSONAS_E)/mapvald$TOTAL_PERS) * 100
mapvald<-mapvald%>%
mutate(PUEBLOS_IN = na_if(PUEBLOS_IN, "Indeterminado"))
shp = "C:\\Users\\dgcal\\Documents\\AAAACTUAL\\Msc\\Tesis\\Datos\\Valdivia"
sfdata = read_sf(shp)
mapvald<-filter(sfdata, COMUNA == "VALDIVIA")
mapvald100<-mapvald%>%
sf::st_buffer(100)
st_write(mapvald, "mapvald.shp", driver = "ESRI Shapefile")
leafsync::latticeview(mapview::mapview(mapvald),
mapview::mapview(mapvald100))
#Se ve bien el buffer
#Seguimos
imagen<-list.files(pattern='*.tif', full.names=TRUE)
bandassep<-brick(stack(imagen)) #esto es por si quiero que el raster tenga hartas capas, por ejemplo, por fecha
plot(bandassep)
ndvi<-(bandassep$B5-bandassep$B4)/(bandassep$B5+bandassep$B4)
plot(ndvi,
main="NDVI Valdivia y Niebla - Septiembre 2020")
r = crop(ndvi, mapvald)
#they do not overlap, so...
crs(ndvi)
crs(mapvald)
#they do not overlap, so...
crs(ndvi)
crs(mapvald)
test<-spTransform(mapvald, crs("EPSG:32719"))
test<-rgdal::spTransform(mapvald, crs("EPSG:32718"))
test<-rgdal::spTransform(mapvald, crs("EPSG:32718"))
test<- spTransform(mapvald, crs(ndvi))
test<- raster::spTransform(mapvald, crs(ndvi))
test<- sp::spTransform(mapvald, crs(ndvi))
